@mixin clm-transparent-bg() {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    opacity: .2;
    background-color: #FFF;
    z-index: -1;
}

@mixin material-transition() {
  -webkit-transition: box-shadow 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), background-color 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  transition: box-shadow 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), background-color 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
}

@mixin tt-boxshadow {
  -webkit-box-shadow: 0px 1px 3px rgba(51, 51, 51, 0.35);
  -moz-box-shadow: 0px 1px 3px rgba(51, 51, 51, 0.35);
  box-shadow: 0px 1px 3px rgba(51, 51, 51, 0.35);
}

@mixin field-border($top:top, $right:right, $bottom:bottom, $left:left) {
    border-#{$top}: 1px solid rgba(0, 0, 0, 0.12) !important;
    border-#{$left}: 1px solid rgba(0, 0, 0, 0.12) !important;
    border-#{$right}: 1px solid rgba(0, 0, 0, 0.12) !important;
    border-#{$bottom}: 1px solid rgba(0, 0, 0, 0.12) !important;
}

@mixin field-validation {
    &.ng-touched.ng-valid-required {
        border-bottom: 2px solid $valid;
    }
    &.ng-touched.ng-invalid-required {
        border-bottom: 2px solid $invalid;
    }
    &:focus {
        border-bottom: 2px solid $highlight !important;
    }
    &.valid {
        border-bottom: 2px solid $valid !important;
    }
    &.invalid {
        border-bottom: 2px solid $invalid !important;
    }
}

@mixin field-common {
    height: 54px !important;
    margin-bottom: 25px;
    text-indent: 18px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}

@mixin content-background-image {
    background-repeat: no-repeat;
    background-image: url('../../img/background_fade.png');
    background-size: cover;
    background-attachment: fixed;
    background-color: #000;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
    @if $depth < 1 {
        box-shadow: none;
    } @else if $depth > 5 {
        @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    } @else {
        box-shadow: bottom-shadow($depth), top-shadow($depth);
    }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
    $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
    $blur: nth(1.5 3 10 14 19, $depth) * 4px;
    $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

    @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
    $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
    $blur: nth(1 3 3 5 6, $depth) * 4px;
    $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

    @return 0 $primary-offset $blur $color;
}
